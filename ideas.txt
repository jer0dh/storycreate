//TODO MinimalPHP login doesn't use PDO mySQL access - possible SQL injection?
//TODO Test browser refreshes and its effects with state and login
//TODO Setup authentication with Google Plus

<!---  BEGIN GOOGLE PLUS IDEAS --->

Use google plus javascript library to logon to google plus.. add username and access_token to State and prompt for email address to use for notification.. result - obtains access_token
pass access_token,email to php service
php service uses access_token to obtain username and email... if invalid, back to logon
Check database for username and email, add if not not exists.  Add access_token to table with timer value

Set access-token in header - storyManager and userManager should check access-token - in database and not timed out -

php checkAuth
    check for access-token in header, if so, compare with authuser table and check timeout, if timed out, logon error returned
    no access-token, logon error returned
    if token starts with "basic-", then update timeout to default(3600s) plus current time.
    possibly later using refresh tokens if timeout for google plus nearing 15 minutes or so.

client-side: on logon error - route to logon page with previous error message - have to be checked on all .error functions

access-token generated via Google Plus or via Basic Auth (basic auth token to start with basic-)

logon page:
<logon with googleplus>
or
<username>
<password>
(eventually, a link to create a new user)..initially, already in database


if logon with google plus
get access-token and id - send to server, , check if id in user table,
    if is,
        validate access-token with google, updated timeout, update access-token, send success
    if not
        ask for email address - send to server,
    send to server - check for existing email address - if exists back to email address page, else
    - validate access-token with google, add to authuser table, add timeout from google to current time
    - check if id in user table, if not add it with email address and name
add access-token to header
else
send username and password to server
check username and password in authuser table
if correct, create access token beginning with "basic-" and store in authuser table and add timeout (3600) to current time
    if not, return error.
add access-token to header
users table fields:
    user_idx (auto), user_name, user_email, user_id

authuser database fields:
    access-token,user_id (links to users), timeout

     user logon with google
        validate access-token with google (return error if not)
        obtain google_id, user name, timeout from google.
        check access-token in authusers, if exists, delete
        add access-token, google_id, timeout to authUser table
        if google_id exists in users table, then return success and access-token
        if not, add google_id as google-user_id, user name as username to user table, put shortened name in name of users table
     user logon without google
        check logon
            if good,
                create access-token and timeout
                get user_id
                add to authuser database
                return access-token and success
            if bad,
                return error
     Check Auth
        confirm access token in authusers
            if not, return not auth
            if so, compare timeout to current time
                if expired, return not auth, expired
                if ok, make timeout 3600 from current time and return authorized




<!---  END GOOGLE PLUS IDEAS --->

<!---  BEGIN AUTHENTICATION IDEAS --->
A javascript service Auth

Pages check if authenticated by running Auth.isAuth(), if not, $location.path('/logon')

Auth.isAuth = function(){
    Check State for SC access-token - if have, return true
}

Auth.init = function(object) {
  where object{scAccessToken: 'dkdkdd;a33', optional[gpAccessToken: "ddl3k344.."]}
  $http.defaults.headers.common['Authorization'] = "Bearer " + user.oauthInfo.access_token;
}

Auth.disconnect() {
    call php.disconnect()
   set State.access-token's to null
   remove $http.default.headers.common['Authorization']
}

A PHP file/class for restful API to confirm authenticated by taking SA access-token, checking SQL if contains and checking
timeout...also a touch function to change timeout to currentTime plus 3600s.
    - Google timeout won't be the same anymore
    //todo : look at recording the google refresh token, to be able to change timeout
    //todo : initially authentication will check with SQL as restful should not have a SESSION, but may need to add to reduce sql usage
PHP.isAuth(scAccessToken){

}
PHP.touch(scAccessToken){

}
PHP.isAuthAndTouch(scAccessToken){
   if PHP.isAuth then PHP.touch(scAccessToken); return true;
   else return false
}
PHP.getInfo(scAccessToken){
  return json{username: , email: , }
  //todo: add image url, settings:{} to be stored and retrieved from user database
}
PHP.disconnect(scAccessToken){

}

<!---  END AUTHENTICATION IDEAS --->

<!---  BEGIN SERVER AUTHENTICATION IDEAS --->

facebook, google, logon.php - authenticates user sends the following to a function that will create sc access token,
    add to authuser database, return sc access token, user_id, user_name
    parameters: user_id (required - must already be unique.  assumes google and facebook ids are unique to table after adding
    'google-' and 'facebook-' prefixes.  logon.php will return a unique ID from users table),
            access-token (optional - 'google-'and 'facebook-' prefixes should already be added. logon.php -none)
            timeout (optional - if received from third parties, use that, otherwise 3600s)
            name (optional - from third parties)

            // check to make sure access-token is not in authusers table, delete if is
            if (existingAccessToken('access-token')){
                deleteAccessToken('access-token');
            }

            // check to make sure existing google ID not in Authusers table, delete if is
            if(existingAuthUsersId('id')){
                deleteAuthUsersId('id');
            }

            // create timeout
            if ! timeout then timeout = 3600
            ScAccessToken = addAuthUser(id, access-token, timeout);

            // add to story create user database (logon.php will already be there, but maybe not third-party logons)
            if (! existingId('id')){
                // add user
                if ! name then name = 'J. Doe'
                addUser(id, name);
                if (! existingId('id')){
                    return new Response('Unable to add user to '. DB_USERS . ' in table ' . TB_USERS, 401);
                }
            }

            $username = getUserName('id');

            return (ScAccessToken, id, $username);

<!---  END SERVER AUTHENTICATION IDEAS --->

//TODO: Fix Alert in logon page

<!---  BEGIN USER RESTful server IDEAS --->
    purposes:   Obtain/update user settings (some stored as JSON string in a SQL field)
                    ex. Obtain/update email address, font color, image URL or encoded, friends list
                User can only read and update their own record.
                A valid user can read user_name, user_id, and image URL to obtain a list of users

<!---  END USER RESTful server IDEAS --->

<!---  BEGIN Permissions IDEAS --->
      permissions table: user_id, story_id, permissions - String('admin, editor, author, subscriber') -
            admin - everything, add users
            editor - add, change others posts,
            author - add posts..not change others.
            subscriber - view story, receive notifications of changes.
            possible 'contributor' - someone who can suggest?
      if story marked public, all users can read. otherwise, user must be listed in permissions table.

      super_admin field in user table for administrator that can do anything?